name: '[+] Sync upstream release'

on:
  workflow_dispatch:
    inputs:
      upstream_ref:
        description: "Optional upstream release tag (e.g. n8n@1.87.0). If blank, automatically find the latest."
        required: false
        default: ""
  schedule:
    - cron: '0 */12 * * *'  # twice a day

jobs:
  check-pr:
    name: Check PR
    runs-on: ubuntu-latest
    outputs:
      pr_exists: ${{ steps.check_existing_pr.outputs.pr_exists }}
      raw_tag: ${{ steps.find_tag.outputs.raw_tag }}
      branch_tag: ${{ steps.normalize.outputs.branch_tag }}
      release_body: ${{ steps.find_tag.outputs.release_body }}
      plus_tag_exists: ${{ steps.check_plus_tag.outputs.plus_tag_exists }}
    steps:
      - name: Check out (plus branch)
        uses: actions/checkout@v3
        with:
          ref: plus
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add upstream
        run: git remote add upstream https://github.com/n8n-io/n8n.git

      - name: Fetch upstream tags
        run: git fetch upstream --tags

      - name: Determine raw target tag and original release content
        id: find_tag
        uses: actions/github-script@v6
        with:
          script: |
            const INPUT_TAG = "${{ github.event.inputs.upstream_ref }}";
            if (INPUT_TAG) {
              try {
                const { data: release } = await github.rest.repos.getReleaseByTag({
                  owner: 'n8n-io',
                  repo: 'n8n',
                  tag: INPUT_TAG
                });
                core.setOutput('raw_tag', release.tag_name);
                core.setOutput('release_body', release.body || '');
              } catch (error) {
                core.setFailed(`Failed to get release by tag: ${error.message}`);
              }
            } else {
              try {
                const { data: release } = await github.rest.repos.getLatestRelease({
                  owner: 'n8n-io',
                  repo: 'n8n'
                });
                core.setOutput('raw_tag', release.tag_name);
                core.setOutput('release_body', release.body || '');
              } catch (error) {
                core.setFailed(`Failed to get latest release: ${error.message}`);
              }
            }

      - name: Normalize branch name (remove 'n8n@' prefix)
        id: normalize
        run: |
          RAW_TAG="${{ steps.find_tag.outputs.raw_tag }}"
          # Remove 'n8n@' only for branch naming; keep RAW_TAG for upstream references.
          NORMALIZED_TAG=$(echo "$RAW_TAG" | sed 's/^n8n@//')
          echo "branch_tag=$NORMALIZED_TAG" >> $GITHUB_OUTPUT

      - name: Check if n8n-plus tag exists
        id: check_plus_tag
        run: |
          NORMALIZED_TAG="${{ steps.normalize.outputs.branch_tag }}"
          PLUS_TAG="n8n-plus@${NORMALIZED_TAG}"
          MATCH=$(git ls-remote --tags origin refs/tags/$PLUS_TAG)
          if [ -n "$MATCH" ]; then
            echo "plus_tag_exists=true" >> $GITHUB_OUTPUT
            echo "Tag '$PLUS_TAG' already exists in origin."
            echo "::notice ::Skipping remaining steps since n8n-plus tag already exists"
          else
            echo "plus_tag_exists=false" >> $GITHUB_OUTPUT
            echo "Tag '$PLUS_TAG' does not exist in origin."
          fi

      - name: Check if raw tag exists in upstream
        id: check_upstream
        if: ${{ steps.check_plus_tag.outputs.plus_tag_exists != 'true' }}
        run: |
          RAW_TAG="${{ steps.find_tag.outputs.raw_tag }}"
          MATCH=$(git ls-remote --tags upstream refs/tags/$RAW_TAG)
          if [ -z "$MATCH" ]; then
            echo "::error ::Upstream does not have tag '$RAW_TAG'. Failing..."
            exit 1
          else
            echo "Upstream has tag '$RAW_TAG'."
          fi

      # Check if there's already an open PR with base=release/<tag>, head=plus
      - name: Check if PR is already open
        id: check_existing_pr
        if: ${{ steps.check_plus_tag.outputs.plus_tag_exists != 'true' }}
        uses: actions/github-script@v6
        with:
          script: |
            const base = `release/${{ steps.normalize.outputs.branch_tag }}`;
            const head = `plus`;
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");

            const { data: pulls } = await github.rest.pulls.list({
              owner,
              repo,
              state: 'open',
              base,
              head: `${owner}:${head}`
            });

            if (pulls.length > 0) {
              core.setOutput("pr_exists", "true");
            } else {
              core.setOutput("pr_exists", "false");
            }

  sync:
    name: Sync release branch
    needs: check-pr
    if: ${{ needs.check-pr.outputs.pr_exists == 'false' && needs.check-pr.outputs.plus_tag_exists == 'false' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Check out (plus branch)
        uses: actions/checkout@v3
        with:
          ref: plus
          token: ${{ secrets.PAT_TOKEN }} # Required with a content + pull_requests + workflows permission to push. Workflows permission is only available with PAT

      - name: Set up git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add upstream
        run: git remote add upstream https://github.com/n8n-io/n8n.git

      - name: Fetch upstream tags
        run: git fetch upstream --tags

      - name: Check if branch already exists in fork
        id: check_branch
        run: |
          BRANCH_TAG="${{ needs.check-pr.outputs.branch_tag }}"
          # Check if branch release/<branch_tag> exists in origin.
          BRANCH_EXISTS=$(git ls-remote --heads origin release/${BRANCH_TAG} | wc -l)
          if [ "$BRANCH_EXISTS" -gt 0 ]; then
            echo "Branch release/${BRANCH_TAG} already exists in origin. Skipping."
            echo "should_skip=true" >> $GITHUB_OUTPUT
          else
            echo "should_skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Create release branch from upstream tag
        run: |
          RAW_TAG="${{ needs.check-pr.outputs.raw_tag }}"
          BRANCH_TAG="${{ needs.check-pr.outputs.branch_tag }}"
          # Create a branch named release/<branch_tag> using the raw upstream tag.
          git checkout -b "release/${BRANCH_TAG}" "refs/tags/${RAW_TAG}"

      - name: Push new branch to fork
        run: |
          BRANCH_TAG="${{ needs.check-pr.outputs.branch_tag }}"
          git push origin "release/${BRANCH_TAG}"

      - name: Create plus-release branch
        run: |
          BRANCH_TAG="${{ needs.check-pr.outputs.branch_tag }}"
          # Checkout plus branch
          git checkout plus
          # Create plus-for-release-{version} branch from plus
          git checkout -b "plus-for-release-${BRANCH_TAG}"
          # Push the new branch to origin
          git push origin "plus-for-release-${BRANCH_TAG}"

      - name: Create PR using GitHub API
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }} # Needed to trigger sub workflow on pull request creation
          script: |
            const { owner, repo } = context.repo;
            try {
              // Build the pull request body including original release content.
              // Store the interpolated outputs in JS constants for proper escaping.
              const branchTag = ${{ toJson(needs.check-pr.outputs.branch_tag) }};
              const rawTag = ${{ toJson(needs.check-pr.outputs.raw_tag) }};
              let releaseBody = String(${{ toJson(needs.check-pr.outputs.release_body) }});

              // Remove markdown links: convert "[text](url)" to just "text".
              releaseBody = releaseBody.replace(/\[([^\]]+)\]\(\s*(https?:\/\/[^\s)]+)\s*\)/g, '$1');

              // Remove any standalone URLs (matches http:// or https:// until whitespace or a closing parenthesis).
              releaseBody = releaseBody.replace(/https?:\/\/[^\s)]+/g, '');

              // Remove GitHub reference-like patterns (e.g. "(#13821)" or "(492230a)").
              // Matches either: a '#' followed by one or more digits, or a hexadecimal string (7+ chars).
              releaseBody = releaseBody.replace(/\(\s*(#\d+|[a-f0-9]{7,})\s*\)/gi, '');

              // Build the pull request body using these constants.
              const prBody = `### Official release: [${rawTag}](https://github.com/n8n-io/n8n/releases/tag/${rawTag}) \r\r${releaseBody}`;
              const result = await github.rest.pulls.create({
                owner,
                repo,
                title: `chore: ðŸ”„ Sync release ${{ needs.check-pr.outputs.branch_tag }}`,
                body: prBody,
                head: `plus-for-release-${{ needs.check-pr.outputs.branch_tag }}`,
                base: `release/${{ needs.check-pr.outputs.branch_tag }}`,
              });
              console.log(`Pull request created: ${result.data.html_url}`);
            } catch (error) {
              console.error('Failed to create pull request:', error);
              core.setFailed(`Failed to create pull request: ${error.message}`);
            }
